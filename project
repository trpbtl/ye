import tkinter as tk
from tkinter import messagebox
from sympy import symbols, sympify
from sympy.logic.boolalg import truth_table

def insert_symbol(symbol):
    """Insert a symbol into the input field at the current cursor position."""
    entry.insert(tk.END, symbol)

def evaluate_proposition():
    # Get proposition input from the user
    prop = entry.get()
    try:
        # Define up to five symbols
        P, Q, R, S, T = symbols('P Q R S T')
        # Parse the proposition into a symbolic expression
        expr = sympify(prop)
        
        # Generate the truth table for the proposition
        table = truth_table(expr, [P, Q, R, S, T])
        
        # Initialize flags and lists for classification
        all_true = all_false = True
        satisfying_combinations = []
        
        # Evaluate each row in the truth table
        for values, result in table:
            if result:
                all_false = False
                satisfying_combinations.append(dict(zip([P, Q, R, S, T], values)))
            else:
                all_true = False
        
        # Determine if the proposition is a tautology, contradiction, or contingency
        if all_true:
            result_type = "Tautology"
            results_text.set(f"The proposition is a {result_type}.")
        elif all_false:
            result_type = "Contradiction"
            results_text.set(f"The proposition is a {result_type}.")
        else:
            result_type = "Contingency"
            results_text.set(f"The proposition is a {result_type}.\n")
            # List combinations that satisfy the proposition
            results_text.set(results_text.get() + "Satisfying combinations:\n" +
                             "\n".join([f"{comb}" for comb in satisfying_combinations]))
    except Exception as e:
        messagebox.showerror("Error", f"Invalid proposition: {e}")

def open_main_app():
    home_screen.pack_forget()
    main_app.pack()

def fade_in(window, alpha=0):
    if alpha < 1:
        alpha += 0.01
        window.attributes('-alpha', alpha)
        window.after(10, fade_in, window, alpha)

# GUI setup
root = tk.Tk()
root.title("Logical Proposition Evaluator")
root.configure(bg='#B39076')  # Set background color to the new shade
root.attributes('-alpha', 0)  # Set initial transparency

# Home screen setup
home_screen = tk.Frame(root, bg='#B39076')  # Set background color to the new shade
intro_label = tk.Label(home_screen, text="Welcome to the Logical Proposition Evaluator!", font=("Arial", 16, "bold"), pady=10, bg='#B39076', fg='white')
intro_message = tk.Label(home_screen, text="This application allows you to enter a logical proposition with up to five variables (P, Q, R, S, T). "
                                           "You can use logical operators to construct your proposition, and the app will evaluate it to determine "
                                           "if it is a tautology, contradiction, or contingency. Additionally, it lists the satisfying combinations "
                                           "for the proposition, if any.", wraplength=400, justify="left", pady=10, bg='#B39076', fg='white')
start_button = tk.Button(home_screen, text="Start", command=open_main_app, width=15, height=2, relief="flat", bd=3, bg="#809671", fg="white", font=("Arial", 10, "bold"))
intro_label.pack()
intro_message.pack()
start_button.pack(pady=20)
home_screen.pack(pady=20)

# Main app setup
main_app = tk.Frame(root, bg='#B39076')  # Set background color to the new shade

# Instructions label
instructions = tk.Label(main_app, text="Hello User, Please enter a proposition with up to five variables (P, Q, R, S, T)", bg='#B39076', fg='white')
instructions.pack(pady=5)

# Entry box for proposition
entry = tk.Entry(main_app, width=50)
entry.pack(pady=5)

# Frame to hold symbol and variable buttons
button_frame = tk.Frame(main_app, bg='#B39076')  # Set background color to the new shade
button_frame.pack(pady=5)

# Define symbols and their corresponding button labels (with Unicode symbols)
symbols = {
    "¬": "¬",
    "∧": "∧",
    "∨": "∨",
    "→": "→",
    "↔": "↔",
    "≡": "≡",
    "P": "P",
    "Q": "Q",
    "R": "R",
    "S": "S",
    "T": "T"
}

# Create buttons for each symbol with rounded corners and square-like appearance
for label, symbol in symbols.items():
    button = tk.Button(button_frame, text=label, command=lambda s=symbol: insert_symbol(s), 
                       width=12, height=2, relief="flat", bd=3, bg="#d3d3d3", fg="black",
                       font=("Arial", 10, "bold"))
    button.pack(side=tk.LEFT, padx=2, pady=2)

# Button to evaluate proposition
evaluate_button = tk.Button(main_app, text="Evaluate Proposition", command=evaluate_proposition,
                            width=20, height=2, relief="flat", bd=3, bg="#809671", fg="white",
                            font=("Arial", 10, "bold"))
evaluate_button.pack(pady=5)

# Label to display results 
results_text = tk.StringVar()
results_label = tk.Label(main_app, textvariable=results_text, justify="left", bg='#B39076', fg='white')
results_label.pack(pady=5)

# Start the GUI event loop and initiate the fade-in effect
fade_in(root)
root.mainloop()
